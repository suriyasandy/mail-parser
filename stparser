import extract_msg
import re
import io
from bs4 import BeautifulSoup
import pandas as pd
import easyocr
from parsers.table_extractor import extract_plaintext_tables

# instantiate the OCR reader once
reader = easyocr.Reader(['en'], gpu=False)

def parse_msg_file_categorized(file_path: str) -> dict:
    msg = extract_msg.Message(file_path)
    msg.encoding = 'utf-8'

    # 1. raw bodies
    raw_text = msg.body or msg.plain_body or ""
    raw_html = msg.htmlBody or msg.html_body or msg.html or ""

    # 2. decode bytes â†’ str if needed
    def ensure_str(x):
        if isinstance(x, (bytes, bytearray)):
            return x.decode('utf-8', errors='ignore')
        return x

    text_body = ensure_str(raw_text)
    html_body = ensure_str(raw_html)

    # 3. split inline vs attachments images, OCR, tables etc...
    inline_images    = []
    image_attachments = []
    for att in msg.attachments or []:
        name = att.longFilename or att.shortFilename or ""
        data = att.data
        ext  = name.lower().rsplit(".",1)[-1]
        if ext in ("png","jpg","jpeg","bmp","tiff"):
            cid_ref = f"cid:{name}"
            if getattr(att, "content_id", None) or cid_ref in html_body:
                inline_images.append({"filename": name, "data": data})
            else:
                image_attachments.append({"filename": name, "data": data})

    # 4. OCR on attachment images
    ocr_results = []
    for img in image_attachments:
        try:
            txt = reader.readtext(img["data"], detail=0)
            ocr_results.append({
                "filename": img["filename"],
                "text": "\n".join(txt)
            })
        except Exception as e:
            ocr_results.append({
                "filename": img["filename"],
                "error": str(e)
            })

    # 5. HTML tables
    soup = BeautifulSoup(html_body, "html.parser")
    html_tables = []
    for tbl in soup.find_all("table"):
        try:
            df = pd.read_html(str(tbl))[0]
            html_tables.append(df)
        except:
            pass

    # 6. Plaintext tables
    plaintext_tables = extract_plaintext_tables(text_body)

    return {
        "text_body": text_body,
        "html_body": html_body,
        "inline_images": inline_images,
        "image_attachments": image_attachments,
        "ocr_results": ocr_results,
        "html_tables": html_tables,
        "plaintext_tables": plaintext_tables,
    }
