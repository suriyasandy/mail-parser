import re
from typing import List, Dict

def extract_table_like_data(lines: List[str], attribute_names: List[str]) -> Dict[str, Dict[str, List[str]]]:
    """
    Parses vertical or unstructured tabular data blocks and groups by entity if possible.
    Handles pseudo-tables like:
        - Trade ID
        - PnL
        - RoRWA values
    """
    entity_map = {}
    current_entity = None

    for i, line in enumerate(lines):
        line = line.strip()

        # Detect Trade Ref (e.g., 8260197L)
        trade_match = re.match(r'^\d{6,}[A-Z]*$', line)
        if trade_match:
            current_entity = line
            if current_entity not in entity_map:
                entity_map[current_entity] = {}
            continue

        if not current_entity:
            continue  # Skip lines until a trade/entity appears

        # Attribute matching
        for attr in attribute_names:
            # Example: "14.57 % RoRWA" or "RoRWA 14.57%"
            value_first = re.match(rf"([0-9.,%]+(?: [A-Za-z%]+)?)\s+{re.escape(attr)}", line, re.IGNORECASE)
            key_first = re.match(rf"{re.escape(attr)}[^\w\d]?\s*([0-9.,%]+(?: [^\s]+)?)", line, re.IGNORECASE)

            if value_first:
                val = value_first.group(1)
                entity_map[current_entity].setdefault(attr, []).append(val)

            elif key_first:
                val = key_first.group(1)
                entity_map[current_entity].setdefault(attr, []).append(val)

            # Value possibly on next line
            elif i + 1 < len(lines):
                next_line = lines[i + 1].strip()
                if re.match(r"^[\d,.\-%]+$", next_line):
                    if re.search(re.escape(attr), line, re.IGNORECASE):
                        entity_map[current_entity].setdefault(attr, []).append(next_line)

    return entity_map
